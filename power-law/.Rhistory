system.time(aa <- daarem(init, mGD, mrosenbrock, step=L, k=k, control = list(tol=1e-7, order=5, maxiter=1e4)))
system.time(aa <- daarem(init, mGD, mrosenbrock, step=1e-4, k=k, control = list(tol=1e-7, order=5, maxiter=1e4)))
aa
log.rosenbrock = function(x,k){log(rosenbrock(x,k))}
log.rosenbrock(rep(2,10))
log.rosenbrock(rep(2,10),10)
log.rosenbrock(rep(1.01,10),10)
log.grad = function(x,k){rosenbrock.grad(x,k) / rosenbrock(x,k)}
log.grad(rep(1.001,10),10)
log.grad(rep(1.00001,10),10)
log.grad(rep(1.00000001,10),10)
rosenbrock.p1log = function(x,k){log(rosenbrock(x,k)+1)}
log.grad = function(x,k){rosenbrock.grad(x,k) / (rosenbrock(x,k)+1)}
log.GD = function(par, step, k) {
gr <- log.grad(par, k)
return(par - step * gr)
}
system.time(aa <- daarem(init, log.GD, rosenbrock.p1log, step=1e-4, k=k, control = list(tol=1e-7, order=5, maxiter=1e4)))
aa$value.objfn
log.GD = function(par, step, k) {
gr <- log.grad(par, k)
return(par - step * gr)
}
system.time(aa <- daarem(init, log.GD, rosenbrock.p1log, step=1e-3, k=k, control = list(tol=1e-7, order=5, maxiter=1e4)))
rosenbrock.p1log = function(x,k,step){log(rosenbrock(x,k)+1)}
log.GD = function(par, step, k) {
gr <- log.grad(par, k)
return(par - step * gr)
}
system.time(aa <- daarem(init, log.GD, rosenbrock.p1log, step=1e-3, k=k, control = list(tol=1e-7, order=5, maxiter=1e4)))
aa$value.objfn
log.rosenbrock = function(x,k,step){log(rosenbrock(x,k)+1)}
log.rosenbrock = function(x,k,step){log(rosenbrock(x,k))}
log.rosenbrock = function(x,k,step){log(rosenbrock(x,k,step))}
log.grad.resize = function(x,k){rosenbrock.grad(x,k) / (rosenbrock(x,k))}
log.grad.resize(rep(1.0001,10),10)
log.grad.resize = function(x,k){rosenbrock.grad(x,k) / sqrt(rosenbrock(x,k))}
log.grad.resize(rep(1.0001,10),10)
log.grad.resize(rep(1.0000001,10),10)
log.grad.resize = function(x,k){rosenbrock.grad(x,k) / (rosenbrock(x,k))^0.33}
log.grad.resize(rep(1.0000001,10),10)
log.grad.resize(rep(1.000001,10),10)
log.grad.resize(rep(1.00001,10),10)
log.grad.resize = function(x,k){rosenbrock.grad(x,k) / (rosenbrock(x,k))^0.25}
log.grad.resize(rep(1.00001,10),10)
log.grad.resize(rep(1.001,10),10)
log.grad.resize(rep(1.1,10),10)
log.GD = function(par, step, k) {
gr <- log.grad.resize(par, k)
return(par - step * gr)
}
system.time(aa <- daarem(init, log.GD, log.rosenbrock, step=5e-4, k=k, control = list(tol=1e-7, order=5, maxiter=1e4)))
aa$value.objfn
system.time(aa <- daarem(init, log.GD, log.rosenbrock, step=5e-4, k=k, control = list(tol=1e-7, order=20, maxiter=1e4)))
system.time(aa <- daarem(init, log.GD, log.rosenbrock, step=5e-4, k=k, control = list(tol=1e-7, order=20, mon.tol=1e-4, maxiter=1e4)))
aa$value.objfn
system.time(aa <- daarem(init, log.GD, log.rosenbrock, step=5e-3, k=k, control = list(tol=1e-7, order=20, mon.tol=1e-4, maxiter=1e4)))
system.time(aa <- daarem(init, log.GD, log.rosenbrock, step=5e-2, k=k, control = list(tol=1e-7, order=20, mon.tol=1e-4, maxiter=1e4)))
system.time(aa <- daarem(init, log.GD, log.rosenbrock, step=1e-2, k=k, control = list(tol=1e-7, order=20, mon.tol=1e-4, maxiter=1e4)))
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)))
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L)
system.time(test <- squarem(init, log.GD, log.rosenbrock, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L)
system.time(test <- squarem(init, GD, rosenbrock, step=0.0005, k=k, control = list(tol=1e-7, objfn.inc=1, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, log.GD, log.rosenbrock, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, log.GD, log.rosenbrock, step=0.005, k=k, control = list(tol=1e-7, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, log.GD, log.rosenbrock, step=0.05, k=k, control = list(tol=1e-7, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, log.GD, log.rosenbrock, step=0.001, k=k, control = list(tol=1e-7, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, log.GD, log.rosenbrock, step=0.0001, k=k, control = list(tol=1e-7, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, log.GD, log.rosenbrock, step=0.00005, k=k, control = list(tol=1e-7, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, log.GD, log.rosenbrock, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, GD, rosenbrock, step=0.0005, k=k, control = list(tol=1e-7, objfn.inc=1, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, log.GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L)
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L)
system.time(test <- squarem(init, log.GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L)
system.time(test <- squarem(init, log.GD, step=0.00005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L)
system.time(spg(init, rosenbrock, rosenbrock.grad, k=k, control = list(maxit=5000, trace=F, gtol=1e-8)))
system.time(test <- spg(init, rosenbrock, rosenbrock.grad, k=k, control = list(maxit=5000, trace=F, gtol=1e-8)));test$value.objfn
system.time(test <- spg(init, rosenbrock, rosenbrock.grad, k=k, control = list(maxit=5000, trace=F, gtol=1e-8)));test$value.objfn
system.time(test <- spg(init, rosenbrock, rosenbrock.grad, k=k, control = list(maxit=5000, trace=F, gtol=1e-8)));test$value
system.time(bfgs <- mize(init, list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)}), method = "L-BFGS")); bfgs$f
system.time(bfgs <- mize(init, list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)}), method = "SR1" )); bfgs$f
system.time(bfgs <- mize(init, list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)}), method = "TN" )); bfgs$f
system.time(bfgs <- mize(init, list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)}), method = "Momentum" )); bfgs$f
system.time(bfgs <- mize(init, list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)}), method = "CG_DY" )); bfgs$f
system.time(bfgs <- mize(init, list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)}), method = "CG" )); bfgs$f
system.time(bfgs <- mize(init, list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)}), method = "CG" )); norm(bfgs$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.00005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.000005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.001, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.001, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.0008, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.00005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.00001, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.00001, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), log.GD, step=0.00005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L)
system.time(bfgs <- mize(rnorm(pdim), list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)}), method = "CG" )); norm(bfgs$par-1, type="2")
system.time(bfgs <- mize(rnorm(pdim), list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)}), method = "CG" ));bfgs$f;norm(bfgs$par-1, type="2")
system.time(bfgs <- mize(rnorm(pdim), fg.list, method = "L_BFGS" ));bfgs$f;norm(bfgs$par-1, type="2")
system.time(bfgs <- mize(rnorm(pdim), fg.list, method = "L-BFGS" ));bfgs$f;norm(bfgs$par-1, type="2")
fg.list=list(fn=function(x){rosenbrock(x,k)}, gr=function(x){rosenbrock.grad(x,k)})
system.time(bfgs <- mize(rnorm(pdim), fg.list, method = "L-BFGS" ));bfgs$f;norm(bfgs$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.00001, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.000005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
####  Initial Guess
pdim <- 10000
init <- runif(pdim)
system.time(test <- spg(init, rosenbrock, rosenbrock.grad, k=k, control = list(maxit=5000, trace=F, gtol=1e-8)));test$value
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(bfgs <- mize(init, fg.list, method = "L-BFGS" ));bfgs$f;norm(bfgs$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-6, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-4, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-2, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-1, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=5e-1, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=5e-2, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=2e-2, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.0005, k=k, control = list(tol=1e-9, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.0005, k=k, control = list(tol=1e-10, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.0005, k=k, control = list(tol=1e-12, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.00005, k=k, control = list(tol=1e-12, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.0005, k=k, control = list(tol=1e-15, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(rnorm(pdim), GD, rosenbrock, step=0.0005, k=k, control = list(tol=1e-7, objfn.inc=1, maxiter=5000)));test$value.objfn
backtracking = function(par, c=0.1, tao=0.9, alpha=1) {
f.x=  rosenbrock(par)
p = rosenbrock.grad(par); m = -norm(p,type="2")
p = p / m; t = -c * m
while(f.x - fn(par+alpha*p) < alpha * t) {
alpha = tao * alpha
}
par+alpha*p
}
system.time(test <- squarem(init, backtracking, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking, step=0.0005, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking, step=1, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
backtracking = function(c=0.1, tao=0.9, alpha=1) {
function(par){
f.x=  rosenbrock(par)
p = rosenbrock.grad(par); m = -norm(p,type="2")
p = p / m; t = -c * m
while(f.x - fn(par+alpha*p) < alpha * t) {
alpha = tao * alpha
}
par+alpha*p
}
}
system.time(test <- squarem(init, backtracking(0.1,0.9,1), step=1, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking(0.5,0.9,1), step=1, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking(0.9,0.9,1), step=1, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
test
backtracking = function(c=0.1, tao=0.9, alpha=1) {
function(par,k,step){
f.x=  rosenbrock(par,k,step)
p = rosenbrock.grad(par,k); m = -norm(p,type="2")
p = p / m; t = -c * m
while(f.x - fn(par+alpha*p) < alpha * t) {
alpha = tao * alpha
}
par+alpha*p
}
}
system.time(test <- squarem(init, backtracking(0.1,0.9,1), step=1, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
test
par+alpha*p
backtracking = function(c=0.1, tao=0.9, alpha=1) {
function(par,k,step){
f.x=  rosenbrock(par,k,step)
p = rosenbrock.grad(par,k); m = -norm(p,type="2")
p = p / m; t = -c * m
while(f.x - fn(par+alpha*p) < alpha * t) {
alpha = tao * alpha
}
par+alpha*p
}
}
system.time(test <- squarem(init, backtracking(0.1,0.9,1), step=1, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking(0.9,0.9,1), step=1, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking(0.9,0.9,1), step=1, k=k, control = list(tol=1e-9, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking(0.9,0.9,1), step=1, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking(0.9,0.9,1), rosenbrock, step=0.0005, k=k, control = list(tol=1e-7, objfn.inc=1, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, backtracking(0.1,0.9,1), rosenbrock, step=0.0005, k=k, control = list(tol=1e-7, objfn.inc=1, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, backtracking(0.1,0.9,1), rosenbrock, step=NA, k=k, control = list(tol=1e-7, objfn.inc=1, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, backtracking(0.1,0.9,0.1), rosenbrock, step=NA, k=k, control = list(tol=1e-7, objfn.inc=1, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, backtracking(0.9,0.9,1), rosenbrock, step=NA, k=k, control = list(tol=1e-7, objfn.inc=1, maxiter=5000)));test$value.objfn
backtracking()(rep(1.0001,10), 10)
backtracking = function(c=0.1, tao=0.9, alpha=1) {
function(par,k,step){
f.x=  rosenbrock(par,k,step)
p = rosenbrock.grad(par,k); m = -norm(p,type="2")
p = p / m; t = -c * m
while(f.x - rosenbrock(par+alpha*p,k,step) < alpha * t) {
alpha = tao * alpha
}
par+alpha*p
}
}
backtracking()(rep(1.0001,10), 10)
system.time(test <- squarem(init, backtracking(0.9,0.9,1), step=NA, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking(0.9,0.9,1), rosenbrock, step=NA, k=k, control = list(tol=1e-7, objfn.inc=1, maxiter=5000)));test$value.objfn
system.time(test <- squarem(init, backtracking(0.1,0.9,1), step=NA, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
system.time(test <- squarem(init, backtracking(0.1,0.7,1), step=NA, k=k, control = list(tol=1e-7, maxiter=5000)));rosenbrock(test$par, k, L);norm(test$par-1, type="2")
x1 = c(0,0.3,0.55,0.7,0.9,0.9)/5.2*2
x1
x2 = c(0.15,0.65,1.3,1.95,2.5,2.5)/5.2*2
x2
x3 = c(0.2,1.3,2.7,4.35,5.9,5.9)/5.2*2;x3
x4 = c(0.45,1.8,4,7.35,10.75,13.2)/5.2*2;x4
x5 = c(0.85,2.9,6.3,12.6,19.4,4.2+5.2*4)/5.2*2;x5
x6 = c(2.4/5.2,1.7,3.0,6.0,9.9,15.9)
yy = cbind(x1,x2,x3,x4,x5,x6)
yy
zz = cbind(c(50,55,60,65,70,75),t(yy))
zz
colnames(zz) = c("Age", "Non_smokers", "Stopped_30", "Stopped_40", "Stopped_50", "Stopped_60", "Continuing_smokers")
zz
as.data.frame(zz)
data = as.data.frame(zz)
setwd("~/cancer/power-law")
write.csv(data,file = "PetoBJC2000.csv")
rownames(zz)=c(), data = as.data.frame(zz)
rownames(zz)=c(); data = as.data.frame(zz)
data
write.csv(data,file = "PetoBJC2000.csv")
rownames(zz)=NULL; data = as.data.frame(zz)
data
write.csv(data,file = "PetoBJC2000.csv")
data[7,] = c(45,0,0,0,0,0,0)
data
require(tidyverse)
data = data %>%arrange(Age)
data
write.csv(data,file = "PetoBJC2000.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
ggplot(aes(Age, CR, col="Expose")) +
geom_line() +
ylab("Cumulative Risk")
View(PetoBJC)
write.csv(data,file = "PetoBJC2000.csv", row.names = F)
library(tidyverse)
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
ggplot(aes(Age, CR, col="Expose")) +
geom_line() +
ylab("Cumulative Risk")
library(tidyverse)
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age)
library(tidyverse)
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
ggplot(aes(x=as.numeric(Age), y=CR, col=Expose)) +
geom_line() +
ylab("Cumulative Risk")
library(tidyverse)
### Visualizing Peto Data
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
ylab("Cumulative Risk")
library(tidyverse)
### Visualizing Peto Data
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")
library(tidyverse)
### Visualizing Peto Data
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")
library(tidyverse)
### Visualizing Peto Data
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age >= 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")
library(tidyverse)
### Visualizing Peto Data
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")
library(tidyverse)
### Visualizing Peto Data in log scale
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")
### Test for polynomial (kick out Non-smokers, or you can include Non-smokers but cut Age >= 55)
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 45 & Expose != "Non_smokers")
library(tidyverse)
### Visualizing Peto Data in log scale
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")
### You see this is highly close to a class of constant slope lines
### which means original Cumulative risk to Age is like a polynomial
### Test for polynomial (kick out Non-smokers, or you can include Non-smokers but cut Age >= 55)
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 45 & Expose != "Non_smokers") %>%
mutate(log.Age = log(Age), log.CR = log(CR)) %>%
group_by(Expose) %>% lm(log.CR~log.Age)
PetoTest = PetoBJC %>%
gather(Expose, CR, -Age) %>%
filter(Age > 45 & Expose != "Non_smokers") %>%
mutate(log.Age = log(Age), log.CR = log(CR))
PetoTest %>% filter(Expose=="Stopped_30") %>% lm(formula = log.CR~log.Age)
lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30"))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_40")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_50")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_60")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Countinuing_smokers")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_40")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_50")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_60")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Continuing_smokers")))
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_y_log10() +
ylab("Cumulative Risk")
library(tidyverse)
### Visualizing Peto Data in log scale
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_y_log10() +
ylab("Cumulative Risk")
### You see this is highly close to a class of constant slope lines
### which means original Cumulative risk to Age is like a polynomial
### Test for polynomial (kick out Non-smokers, or you can include Non-smokers but cut Age >= 55)
PetoTest = PetoBJC %>%
gather(Expose, CR, -Age) %>%
filter(Age > 45 & Expose != "Non_smokers") %>%
mutate(log.Age = log(Age), log.CR = log(CR))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_40")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_50")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_60")))
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Continuing_smokers")))
### You can see the slopes are close and all significant with the Rsquare quite large
### which means straight line is a perfect fit for the data
### Therefore the power law do not have evidence to be wrong compare with constancy
lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30"))$Coefficients
xx=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30"))
xx=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30"));xx$coefficients
xx=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30"));xx$df.residual
xx=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30"));xx$model
xx=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30"));xx$residuals
summary(lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30")))
library(tidyverse)
### Visualizing Peto Data in log scale
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")
### This is a plot for only CR being in log scale
### Where a straight line suggest a exponetial law
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_y_log10() +
ylab("Cumulative Risk")
### You see the log-log plot is highly close to a class of constant slope lines
### might be better than that of one-log plot
### which means original Cumulative risk to Age is like a polynomial (slightly more than a exponential)
### Test for polynomial (kick out Non-smokers, or you can include Non-smokers but cut Age >= 55)
PetoTest = PetoBJC %>%
gather(Expose, CR, -Age) %>%
filter(Age > 45 & Expose != "Non_smokers") %>%
mutate(log.Age = log(Age), log.CR = log(CR))
m30=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30"));summary(m30)
m40=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_40"))
m50=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_50"));summary(m50)
m60=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_60"))
mcs=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Continuing_smokers"));summary(mcs)
### You can see the slopes are close and all significant with the Rsquare quite large
### which means straight line is a perfect fit for the data
### Therefore the power law do not have evidence to be wrong compare with constancy
library(tidyverse)
### Visualizing Peto Data in log scale
PetoBJC = read_csv("PetoBJC2000.csv")
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() +
scale_x_log10() + scale_y_log10() +
ylab("Cumulative Risk")+ggtitle("log-log plot")
### This is a plot for only CR being in log scale
### Where a straight line suggest a exponetial law
PetoBJC %>% gather(Expose, CR, -Age) %>%
filter(Age > 50) %>%
ggplot(aes(x=Age, y=CR, col=Expose)) +
geom_line() + scale_y_log10() +
ylab("Cumulative Risk") + ggtitle("log-one plot")
### You see the log-log plot is highly close to a class of constant slope lines
### might be better than that of one-log plot
### which means original Cumulative risk to Age is like a polynomial (slightly more than a exponential)
### Test for polynomial (kick out Non-smokers, or you can include Non-smokers but cut Age >= 55)
PetoTest = PetoBJC %>%
gather(Expose, CR, -Age) %>%
filter(Age > 45 & Expose != "Non_smokers") %>%
mutate(log.Age = log(Age), log.CR = log(CR))
m30=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_30"));summary(m30)
m40=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_40"))
m50=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_50"));summary(m50)
m60=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Stopped_60"))
mcs=lm(formula = log.CR~log.Age, data = PetoTest %>% filter(Expose=="Continuing_smokers"));summary(mcs)
### You can see the slopes are close and all significant with the Rsquare quite large
### which means straight line is a perfect fit for the data
### Therefore the power law do not have evidence to be wrong compare with constancy
aov
aov(log.CR~Expose+log.Age,PetoTest)
lm(log.CR ~ Expose + Expose:log.Age, PetoBJC)
lm(log.CR ~ Expose + Expose:log.Age, PetoTest)
summary(lm(log.CR ~ Expose + Expose:log.Age, PetoTest))
summary(aov(log.CR~Expose+log.Age,PetoTest))
xx = aov(log.CR~Expose+log.Age,PetoTest)
xx$residuals
xx$df.residual
pf((1.26/24)/(0.1598/20),24,20)
lm.full = lm(log.CR ~ Expose + Expose:log.Age, PetoTest)
lm.constant = lm(log.CR ~ Expose + log.Age, PetoTest)
anova(lm.full,lm.constant,test="Chisq")
summary(anova(lm.full,lm.constant,test="Chisq"))
summary(anova(lm.constant,lm.full,test="Chisq"))
compare = anova(lm.constant,lm.full,test="Chisq")
compare$`Pr(>Chi)`
lm.full = lm(log.CR ~ Expose + Expose:log.Age, PetoTest)
lm.constant = lm(log.CR ~ Expose + log.Age, PetoTest)
compare = anova(lm.constant,lm.full)
lm.full = lm(log.CR ~ Expose + Expose:log.Age, PetoTest)
lm.constant = lm(log.CR ~ Expose + log.Age, PetoTest)
compare = anova(lm.constant,lm.full)
summary(compare)
lm.constant
summary(lm.constant)
summary(lm.full)
compare
lm.full = lm(log.CR ~ Expose + Expose:log.Age, PetoTest)
lm.constant = lm(log.CR ~ Expose + log.Age, PetoTest)
compare = anova(lm.constant,lm.full)
compare
### Here is a test in a "most rigorous" way, which test if the power of the polynomial is equal if every expose follow the power law.
### For the test data, we can see we can't pass the test
lm.full = lm(log.CR ~ Expose + Expose:log.Age, PetoTest)
lm.constant = lm(log.CR ~ Expose + log.Age, PetoTest)
compare = anova(lm.constant,lm.full)
compare
### For the test data kick out continuing smokers, we can see we can't pass the test
lm.full = lm(log.CR ~ Expose + Expose:log.Age, PetoTest%>%filter(Expose!="Continuing_smokers"))
lm.constant = lm(log.CR ~ Expose + log.Age, PetoTest%>%filter(Expose!="Continuing_smokers"))
compare = anova(lm.constant,lm.full)
compare
