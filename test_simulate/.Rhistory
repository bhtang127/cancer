}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 50, 50)
centers = 2000; N = 10; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
True_Centers = length(x) / N
print(True_Centers)
res = collapsed.Gibbs.sampler(x,y,sig2=sig^2,
0.5, 0.5, 0.5^2/2,
30, maxiter=100)
pic = matrix(0, 50, 50)
centers = 1000; N = 10; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
True_Centers = length(x) / N
print(True_Centers)
res = collapsed.Gibbs.sampler(x,y,sig2=sig^2,
0.5, 0.5, 0.5^2/2,
30, maxiter=100)
pic = matrix(0, 50, 50)
centers = 500; N = 10; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
True_Centers = length(x) / N
print(True_Centers)
res = collapsed.Gibbs.sampler(x,y,sig2=sig^2,
0.5, 0.5, 0.5^2/2,
30, maxiter=100)
hist(res$K)
Most_frequent_k = as.numeric(names(sort(table(K),decreasing=TRUE)[1]))
Most_frequent_k = as.numeric(names(sort(table(res$K),decreasing=TRUE)[1]))
for(j in 100:1){
if(dim(res$trace_mui[[j]])[1] == Most_frequent_k)
break
}
cluster = res$trace_cluster[[j]]
mui = res$trace_mui[[j]]
weight = c()
for(i in 1:max(cluster)){
weight = c(weight, mean(cluster==i))
}
weight
mui
pic_re = matrix(0,50,50)
for(i in 1:1000){
ce = which(as.logical(rmultinom(1,1,weight)))
mx = mui[ce,1];my = mui[ce,2]
for(t in 1:100){
x = rnorm(1,mx,0.1)
y = rnorm(1,my,0.1)
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic_re[round(x[i]*50),round(y[i]*50)] = pic_re[round(x[i]*50),round(y[i]*50)]+1
}
}
}
pic_re = matrix(0,50,50)
for(i in 1:1000){
ce = which(as.logical(rmultinom(1,1,weight)))
mx = mui[ce,1];my = mui[ce,2]
for(t in 1:100){
x = rnorm(1,mx,0.1)
y = rnorm(1,my,0.1)
if(x>0 & x<1 & y>0 & y<1){
pic_re[round(x*50),round(y*50)] = pic_re[round(x*50),round(y*50)]+1
}
}
}
pic_re = pic_re / sum(pic_re)
image(pic_re, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Reconstruction Picture")
install.packages("gmp")
setwd("~/")
source('~/Downloads/code_commented.R', echo=TRUE)
source('~/Downloads/code_commented.R', echo=TRUE)
##     M : DP parameter M
##     n_init: init number of clusters
##     maxiter: iteration numbers
##
## Output:
##     cluster: cluster assignment of last iteration
##     mui: all cluster parameter(here gaussian means) of last iteration
##     K: array of cluster numbers during whole iteration
##     trace_mui: cluster parameters during whole iteration
##     trace_cluster: cluster assignments during whole iteration
fit_image = function(x_points, y_points, sigma, num_centers,
shape1, shape2, maxiter=100){
res = collapsed.Gibbs.sampler(x_points,y_points,sig2=sigma^2,
0.5, 0.5, 0.5^2/2,
M = num_points/log(length(x_points)),
maxiter=maxiter)
Most_frequent_k = as.numeric(names(sort(table(res$K),decreasing=TRUE)[1]))
for(j in maxiter:1){
if(dim(res$trace_mui[[j]])[1] == Most_frequent_k)
break
}
cluster = res$trace_cluster[[j]]
mui = res$trace_mui[[j]]
weight = c()
for(i in 1:max(cluster)){
weight = c(weight, mean(cluster==i))
}
pic_re = matrix(0,shape1,shape2)
for(i in 1:(shape1*shape2/4)){
ce = which(as.logical(rmultinom(1,1,weight)))
mx = mui[ce,1]; my = mui[ce,2]
for(t in 1:100){
x = rnorm(1,mx,0.1)
y = rnorm(1,my,0.1)
if(x>0 & x<1 & y>0 & y<1){
pic_re[round(x*shape1),round(y*shape2)] = pic_re[round(x*shape1),round(y*shape2)]+1
}
}
}
pic_re = pic_re / sum(pic_re)
image(pic_re, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Reconstruction Picture")
list(centers = mui, weight = weight)
}
xx = fit_image(x,y,sig,500,70,70,50)
##     M : DP parameter M
##     n_init: init number of clusters
##     maxiter: iteration numbers
##
## Output:
##     cluster: cluster assignment of last iteration
##     mui: all cluster parameter(here gaussian means) of last iteration
##     K: array of cluster numbers during whole iteration
##     trace_mui: cluster parameters during whole iteration
##     trace_cluster: cluster assignments during whole iteration
fit_image = function(x_points, y_points, sigma, num_centers,
shape1, shape2, maxiter=100){
res = collapsed.Gibbs.sampler(x_points,y_points,sig2=sigma^2,
0.5, 0.5, 0.5^2/2,
M = num_centers/log(length(x_points)),
maxiter=maxiter)
Most_frequent_k = as.numeric(names(sort(table(res$K),decreasing=TRUE)[1]))
for(j in maxiter:1){
if(dim(res$trace_mui[[j]])[1] == Most_frequent_k)
break
}
cluster = res$trace_cluster[[j]]
mui = res$trace_mui[[j]]
weight = c()
for(i in 1:max(cluster)){
weight = c(weight, mean(cluster==i))
}
pic_re = matrix(0,shape1,shape2)
for(i in 1:(shape1*shape2/4)){
ce = which(as.logical(rmultinom(1,1,weight)))
mx = mui[ce,1]; my = mui[ce,2]
for(t in 1:100){
x = rnorm(1,mx,0.1)
y = rnorm(1,my,0.1)
if(x>0 & x<1 & y>0 & y<1){
pic_re[round(x*shape1),round(y*shape2)] = pic_re[round(x*shape1),round(y*shape2)]+1
}
}
}
pic_re = pic_re / sum(pic_re)
image(pic_re, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Reconstruction Picture")
list(centers = mui, weight = weight)
}
xx = fit_image(x,y,sig,500,70,70,50)
xx$centers
plot(xx$centers)
xx$weight
## reconstruction image
xx = fit_image(x,y,sig,500,70,70,20)
## simulating imaging
par(mfrow=c(2,1))
pic = matrix(0, 50, 50)
centers = 500; N = 10; sig=0.1; maxiter=100
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
## reconstruction image
xx = fit_image(x,y,sig,500,70,70,20)
## simulating imaging
par(mfrow=c(2,1))
pic = matrix(0, 50, 50)
centers = 500; N = 10; sig=0.1; maxiter=100
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
## reconstruction image
xx = fit_image(x,y,sig,500,40,30,20)
## simulating imaging
par(mfrow=c(2,1))
pic = matrix(0, 50, 50)
centers = 500; N = 10; sig=0.1; maxiter=100
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
## reconstruction image
xx = fit_image(x,y,sig,500,100,100,20)
collapsed.Gibbs.sampler = function(x,y, sig2, mx, my, B, M,
n_init=1, maxiter=5000){
N = length(x); K = c()
s = init(n_init, x, y, mx, my, B)
trace_s = list(); K = c(K, max(s))
mui = parameter.sample(s, x, y, sig2, mx, my, B)
trace_mui = list()
cat("Total Iteration Number:",it)
for(it in 1:maxiter){
cat("iteration: ",it,"\r")
s = cluster.sample(s,x,y,sig2,mx,my,B,M)
trace_s[[it]] = rep(s)
K = c(K, max(s))
mui = parameter.sample(s,x,y,sig2,mx,my,B)
trace_mui[[it]] = mui
}
list(cluster = s, mui = mui, K = K,
trace_cluster=trace_s, trace_mui=trace_mui)
}
## simulating imaging
par(mfrow=c(2,1))
pic = matrix(0, 50, 50)
centers = 500; N = 10; sig=0.1; maxiter=100
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
## reconstruction image
xx = fit_image(x,y,sig,500,100,100,20)
collapsed.Gibbs.sampler = function(x,y, sig2, mx, my, B, M,
n_init=1, maxiter=5000){
N = length(x); K = c()
s = init(n_init, x, y, mx, my, B)
trace_s = list(); K = c(K, max(s))
mui = parameter.sample(s, x, y, sig2, mx, my, B)
trace_mui = list()
cat("Total Iteration Number:",maxiter)
for(it in 1:maxiter){
cat("iteration: ",it,"\r")
s = cluster.sample(s,x,y,sig2,mx,my,B,M)
trace_s[[it]] = rep(s)
K = c(K, max(s))
mui = parameter.sample(s,x,y,sig2,mx,my,B)
trace_mui[[it]] = mui
}
list(cluster = s, mui = mui, K = K,
trace_cluster=trace_s, trace_mui=trace_mui)
}
## simulating imaging
par(mfrow=c(2,1))
pic = matrix(0, 50, 50)
centers = 500; N = 10; sig=0.1; maxiter=100
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
## reconstruction image
xx = fit_image(x,y,sig,500,100,100,20)
collapsed.Gibbs.sampler = function(x,y, sig2, mx, my, B, M,
n_init=1, maxiter=5000){
N = length(x); K = c()
s = init(n_init, x, y, mx, my, B)
trace_s = list(); K = c(K, max(s))
mui = parameter.sample(s, x, y, sig2, mx, my, B)
trace_mui = list()
cat("Total Iteration Number:",maxiter,"\n")
for(it in 1:maxiter){
cat("iteration: ",it,"\r")
s = cluster.sample(s,x,y,sig2,mx,my,B,M)
trace_s[[it]] = rep(s)
K = c(K, max(s))
mui = parameter.sample(s,x,y,sig2,mx,my,B)
trace_mui[[it]] = mui
}
list(cluster = s, mui = mui, K = K,
trace_cluster=trace_s, trace_mui=trace_mui)
}
## simulating imaging
par(mfrow=c(2,1))
pic = matrix(0, 50, 50)
centers = 500; N = 10; sig=0.1; maxiter=100
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
## reconstruction image
xx = fit_image(x,y,sig,500,100,100,20)
xx$mui[:,1]
xx$mui[,1]
xx$mui
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
sample(matrix(c(1,2,3,4),2,2), size = 5, matrix(c(0.1,0.2,0.3,0.4),2,2))
sample(matrix(c(1,2,3,4),2,2), size = 5, prob=matrix(c(0.1,0.2,0.3,0.4),2,2))
sample(list(1,2,3,4),5)
sample(list(1,2,3,4),5, replace = T)
c(sample(list(1,2,3,4),5, replace = T))
sample(matrix(c(1,2,3,4),2,2), size = 5, replace = T,prob=matrix(c(0.1,0.2,0.3,0.4),2,2))
sample(matrix(c(1,2,3,4),2,2), size = 5, replace = T,prob=matrix(c(0.1,0.2,0.3,0.4),2,2))
centers = 500; N = 200; sig=0.1; maxiter=100
source("DPM.R")
## simulating imaging
par(mfrow=c(2,1))
pic = matrix(0, 100, 100)
centers = 500; N = 200; sig=0.1; maxiter=100
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*100),round(y[i]*100)] = pic[round(x[i]*100),round(y[i]*100)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
source('~/example.R', echo=TRUE)
setwd("~/work/cancer/test_simulate")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
result = read_csv("result.csv")
library(tidyverse)
result = read_csv("result.csv")
str(result)
?col_types
??col_types
library(tidyverse)
result = read_csv("result.csv", col_types = c("HitType1"="character"))
library(tidyverse)
result = read_csv("result.csv", col_types = col(HitType1="c"))
library(tidyverse)
result = read_csv("result.csv", col_types = col(HitType1=col_character()))
library(tidyverse)
result = read_csv("result.csv", col_types = cols(HitType1=col_character()))
str(result)
hist(result$ExitTime)
hist(result$ExitTime,probability = TRUE)
sum(is.na(result$HitTime1))
View(result[is.na(result$HitTime1),])
View(result)
survival_prob = c()
ts = seq(0,4160,length.out = 1000)
for(t in ts){
prob = mean(result$ExitTime < (4160-ts))
survival_prob = c(survival_prob, prob)
}
plot(ts, survival_prob)
cancer_prob = c()
ts = seq(0,4160,length.out = 1000)
for(t in ts){
prob = mean(result$ExitTime < (4160-t))
cancer_prob = c(cancer_prob, prob)
}
plot(ts, cancer_prob)
cancer_prob = c()
ts = seq(0,4160,length.out = 1000)
for(t in ts){
prob = mean(result$ExitTime < (4160-t))
cancer_prob = c(cancer_prob, prob)
}
plot(ts/52, cancer_prob)
hist(result$HitTime1/52)
table(result$HitType1)
table(result$HitType1, useNA = TRUE)
table(result$HitType2)
table(result$HitType3)
cancer_prob = c()
ts = seq(0,4160,length.out = 1000)
for(t in ts){
prob = mean(result$ExitTime < (4160-t))
cancer_prob = c(cancer_prob, prob)
}
plot(ts/52, cancer_prob)
hist(result$HitTime1/52)
table(result$HitType1)
table(result$HitType2)
table(result$HitType1)
table(result$HitType2)
table((result %>% filter(HitType2=="F"))$HitType3)
table(result$HitType1)
table(result$HitType2)
table((result %>% filter(HitType2=="F"))$HitType3)
table((result %>% filter(HitType2=="S"))$HitType3)
table((result %>% filter(HitType2=="M"))$HitType3)
1197/643 - 7/4
1197/643
7/4
mean(result$ExitTime<4160)
